// <auto-generated />
using System;
using AuthForge.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthForge.Infrastructure.Migrations
{
    [DbContext(typeof(AuthForgeDbContext))]
    [Migration("20251018190115_ConvertEmailToOwnedType")]
    partial class ConvertEmailToOwnedType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("AuthForge.Domain.Entities.AdminRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UsedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("admin_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("DeactivatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("deactivated_at_utc");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.EndUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("email_verification_token");

                    b.Property<DateTime?>("EmailVerificationTokenExpiresAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("email_verification_token_expires_at");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_email_verified");

                    b.Property<DateTime?>("LastLoginAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_login_at_utc");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LockedOutUntil")
                        .HasColumnType("TEXT")
                        .HasColumnName("locked_out_until");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("end_users", (string)null);
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.EndUserPasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at_utc");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_used");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UsedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_at_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("end_user_password_reset_tokens", (string)null);
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.EndUserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("expires_at_utc");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT")
                        .HasColumnName("ip_address");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("replaced_by_token");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("revoked_at_utc");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UsedAtUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("used_at_utc");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("end_user_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.Application", b =>
                {
                    b.OwnsOne("AuthForge.Domain.ValueObjects.ApplicationSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("ApplicationId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("AccessTokenExpirationMinutes")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LockoutDurationMinutes")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MaxFailedLoginAttempts")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("RefreshTokenExpirationDays")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ApplicationId");

                            b1.ToTable("applications");

                            b1.ToJson("settings");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationId");
                        });

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.EndUser", b =>
                {
                    b.HasOne("AuthForge.Domain.Entities.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AuthForge.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("EndUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT")
                                .HasColumnName("email");

                            b1.HasKey("EndUserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("end_users");

                            b1.WithOwner()
                                .HasForeignKey("EndUserId");
                        });

                    b.OwnsOne("AuthForge.Domain.ValueObjects.HashedPassword", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("EndUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT")
                                .HasColumnName("password_hash");

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("TEXT")
                                .HasColumnName("password_salt");

                            b1.HasKey("EndUserId");

                            b1.ToTable("end_users");

                            b1.WithOwner()
                                .HasForeignKey("EndUserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.EndUserPasswordResetToken", b =>
                {
                    b.HasOne("AuthForge.Domain.Entities.EndUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthForge.Domain.Entities.EndUserRefreshToken", b =>
                {
                    b.HasOne("AuthForge.Domain.Entities.EndUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
